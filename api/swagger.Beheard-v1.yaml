---
swagger: "2.0"
info:
  version: "2017-05-22T13:42:06Z"
  title: "Beheard"
host: "api-beheard.lawrencemcdaniel.com"
basePath: "/v1"
schemes:
- "https"
paths:
  /:
    get:
      consumes:
      - "application/json"
      produces:
      - "text/html"
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "<html>\n    <head>\n   \t<title>Be Heard REST API</title>\n\
                \    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\
                \ integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\
                \ crossorigin=\"anonymous\">\n    <link rel=\"icon\" type=\"image/jpeg\"\
                \ href=\"https://beheard.lawrencemcdaniel.com/images/favicon.png\"\
                \ />\n        <style>\n          h2 {\n            margin-left: 5px;\n\
                \          }\n\n          h3 {\n            margin-left: 10px;\n \
                \         }\n\n          p {\n            margin-left: 20px;\n   \
                \       }\n\n          code {\n             color: red;\n        \
                \     font-style: italic;\n             background-color: #f1f1f1;\n\
                \             padding-right: 5px;\n             padding-left: 5px;\n\
                \          }\n\n          pre {\n             background-color: #f1f1f1;\n\
                \             margin: 35px;\n          }\n          footer {\n   \
                \         height: 75px;\n            background-color: #111111;\n\
                \            color: white;\n            margin: 0px;\n           \
                \ padding: 0px;\n          }\n\n          footer p {\n           \
                \ position: relative;\n            padding: 25px;\n            text-align:\
                \ center;\n          }\n\n        </style>\n    </head>\n    <body>\n\
                \n      <div id=\"main-content\" class=\"container\">\n        <h1>Welcome\
                \ to the Be Heard REST API!</h1>\n\n        You have succesfully invoked\
                \ this API. You are seeing this HTML page because the <code>GET</code>\
                \ method to the root resource this API returns is content generated\
                \ as a Mock integration.\n\n        The Be Heard API provides read\
                \ and write access to several resources. Many of these interact with\
                \ a NoSQL database while a couple provide seamless integration to\
                \ other AWS cloud infrastructure back end resources. This API primarily\
                \ uses a web and computer-friendly data interchange format called\
                \ JSON which enables this interface to efficiently send and receive\
                \ text representations of complex data objects. You can read more\
                \ about JSON <a href=\"http://www.json.org/\" target=\"_blank\">via\
                \ this link</a>.\n\n        <h2>Resources you can retrieve with this\
                \ API<h2>\n\n        <h3>Comments</h3>\n        <p>Though not currently\
                \ implemented on the production site, the Be Heard API provides a\
                \ full-featured comments api that is page-aware and can optionally\
                \ be used to dump the entire comments database in JSON format.</p>\n\
                \n        <p>By making a <a href=\"/v1/comments/\" target=\"_blank\"\
                >GET request</a> to <code>/comments</code> you can retrieve a list\
                \ of Comments in this API. You can optionall append the URI of one\
                \ of the site's web page to retrieve only the comments made to that\
                \ page. For example, to retreive the JSON objects representing the\
                \ page comments from web site page \"big-news-in-dc\", you can would\
                \ make a GET request to <code>/joinus/bid-news-in-dc</code>.</p>\n\
                \n        <h3>Mail List</h3>\n        <p>A mail list sign up form\
                \ exists on the landing page where visitors can add their email address\
                \ to a newsletter database. You can download this database by making\
                \ a <a href=\"/v1/maillist/\" target=\"_blank\">GET request</a> to\
                \ <code>/maillist</code></p>\n\n        <h3>Join Us</h3>\n       \
                \ <p>A \"Join Us\" form also exists on the landing page where visitors\
                \ can leave their contact information if they'd like to get more involved\
                \ with Be Heard. You can download the entire database  by making a\
                \ <a href=\"/v1/joinus/\" target=\"_blank\">GET request</a> to <code>/joinus</code>\
                \ or you can optionally append an email address of a single visitor\
                \ to retrieve only one JSON record for that visitor. For example,\
                \ to retreive the JSON object representing the visitor with email\
                \ address \"lpm0073@gmail.com\", you can would make a GET request\
                \ to <code>/joinus/lpm0073@gmail.com</code>.</p>\n\n        <h2>Resources\
                \ you can store in a cloud database with this API</h2>\n        <p>You\
                \ can use a REST client such as <a href=\"https://www.getpostman.com/\"\
                \ target=\"_blank\">Postman</a> to test the POST methods included\
                \ in this API. Each of the <code>POST</code> API methods require a\
                \ JSON \"payload\" that includes the data to be stored. Each method\
                \ has it's own special format. You'll need to refer to the examples\
                \ included in this section to create valid payloads.</p>\n\n     \
                \   <h3>Comments</h3>\n        <p>You can upload a comment with a\
                \ <code>POST</code> method to <code>/comments</code> and a payload\
                \ of the following format included in the body of the http request:</p>\n\
                \        \t<div>\n        \t  \t<p><pre>\n{\n\t\"pageId\": \"silly-web-page\"\
                ,\n\t\"userName\": \"mcdaniel0073\",\n\t\"message\": \"this article\
                \ should win a pultizer prize -- not!\"\n}</p></pre>\n        \t</div>\n\
                \n        <h3>Mail List</h3>\n        <p>You can upload a comment\
                \ with a <code>POST</code> method to <code>/maillist</code> and a\
                \ payload of the following format included in the body of the http\
                \ request:</p>\n        \t<div>\n        \t  \t<p><pre>\n{\n\t\"emailAddress\"\
                : \"a-valid-email-address@gmail.com\"\n}</p></pre>\n        \t</div>\n\
                \n\n        <h3>Join Us</h3>\n        <p>You can upload a comment\
                \ with a <code>POST</code> method to <code>/joinus</code> and a payload\
                \ of the following format included in the body of the http request:</p>\n\
                \        \t<div>\n        \t  \t<p><pre>\n{\n\t\"emailAddress\": \"\
                a-valid-email-address@gmail.com\",\n\t\"firstName\": \"George\",\n\
                \t\"lastName\": \"Washington\",\n\t\"comment\": \"Yadda yadda yadda,\
                \ blah blah nannah nanna nah!\",\n}</p></pre>\n        \t</div>\n\n\
                \      </div>  <!-- id=\"main-content\" class=\"container\" -->\n\n\
                \      <footer class=\"footer\">\n          <div class=\"container\"\
                >\n            <p class=\"text-muted\">Contact: Lawrence McDaniel\
                \ | lpm0073@gmail.com | <a href=\"http://lawrencemcdaniel.com\" target=\"\
                blank\">lawrencemcdaniel.com</a></p>\n          </div>\n       </footer>\n\
                \      <script type=\"text/javascript\" src=\"https://use.fontawesome.com/f234ed9c9a.js\"\
                ></script>\n      <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\
                \ integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\
                \ crossorigin=\"anonymous\"></script>\n      <script type=\"text/javascript\"\
                \ src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\
                \ integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\
                \ crossorigin=\"anonymous\"></script>\n    </body>\n</html>\n"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /comments:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/comment-editor"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"comments\"\
                : [\n        #foreach($elem in $inputRoot.Items) {\n            \"\
                commentId\": \"$elem.commentId.S\",\n            \"userName\": \"\
                $elem.userName.S\",\n            \"message\": \"$elem.message.S\"\n\
                \        }#if($foreach.hasNext),#end\n\t#end\n    ]\n}"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"Comments\",\n    \"ReturnConsumedCapacity\"\
            : \"TOTAL\"\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Scan"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/comment-editor"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ \n    \"TableName\": \"Comments\",\n    \"Item\": {\n\
            \t\"commentId\": {\n            \"S\": \"$context.requestId\"\n      \
            \      },\n        \"pageId\": {\n            \"S\": \"$input.path('$.pageId')\"\
            \n            },\n        \"userName\": {\n            \"S\": \"$input.path('$.userName')\"\
            \n        },\n        \"message\": {\n            \"S\": \"$input.path('$.message')\"\
            \n        }\n    }\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/PutItem"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /comments/{pageId}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/comment-editor"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"comments\"\
                : [\n        #foreach($elem in $inputRoot.Items) {\n            \"\
                commentId\": \"$elem.commentId.S\",\n            \"userName\": \"\
                $elem.userName.S\",\n            \"message\": \"$elem.message.S\"\n\
                \        }#if($foreach.hasNext),#end\n\t#end\n    ]\n}"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"Comments\",\n    \"IndexName\"\
            : \"pageId-index\",\n    \"KeyConditionExpression\": \"pageId = :v1\"\
            ,\n    \"ExpressionAttributeValues\": {\n        \":v1\": {\n        \
            \    \"S\": \"$input.params('pageId')\"\n        }\n    }\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Query"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /joinus:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/Beheard-JoinUs-editor"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"joinus\"\
                : [\n        #foreach($elem in $inputRoot.Items) {\n            \"\
                requestId\": \"$elem.requestId.S\",\n            \"emailAddress\"\
                : \"$elem.emailAddress.S\",\n            \"firstName\": \"$elem.firstName.S\"\
                ,\n            \"lastName\": \"$elem.lastName.S\",\n            \"\
                comment\": \"$elem.comment.S\"\n        }#if($foreach.hasNext),#end\n\
                \t#end\n    ]\n}"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"JoinUs\",\n    \"ReturnConsumedCapacity\"\
            : \"TOTAL\"\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Scan"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/Beheard-JoinUs-editor"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ \n    \"TableName\": \"JoinUs\",\n    \"Item\": {\n\
            \t\"requestId\": {\n            \"S\": \"$context.requestId\"\n      \
            \      },\n        \"emailAddress\": {\n            \"S\": \"$input.path('$.emailAddress')\"\
            \n            },\n        \"firstName\": {\n            \"S\": \"$input.path('$.firstName')\"\
            \n        },\n        \"lastName\": {\n            \"S\": \"$input.path('$.lastName')\"\
            \n        },\n        \"comment\": {\n            \"S\": \"$input.path('$.comment')\"\
            \n        }\n    }\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/PutItem"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /joinus/{emailAddress}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "emailAddress"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/Beheard-JoinUs-editor"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"joinus\"\
                : [\n        #foreach($elem in $inputRoot.Items) {\n            \"\
                requestId\": \"$elem.requestId.S\",\n            \"emailAddress\"\
                : \"$elem.emailAddress.S\",\n            \"firstName\": \"$elem.firstName.S\"\
                ,\n            \"lastName\": \"$elem.lastName.S\",\n            \"\
                comment\": \"$elem.comment.S\"\n        }#if($foreach.hasNext),#end\n\
                \t#end\n    ]\n}"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"JoinUs\",\n    \"IndexName\"\
            : \"emailAddress-index\",\n    \"KeyConditionExpression\": \"emailAddress\
            \ = :v1\",\n    \"ExpressionAttributeValues\": {\n        \":v1\": {\n\
            \            \"S\": \"$input.params('emailAddress')\"\n        }\n   \
            \ }\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Query"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /maillist:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/BeheardMailList-editor"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"maillist\"\
                : [\n        #foreach($elem in $inputRoot.Items) {\n            \"\
                emailAddress\": \"$elem.emailAddress.S\",\n            \"requestId\"\
                : \"$elem.requestId.S\",\n            \"sourceIp\": \"$elem.sourceIp.S\"\
                \n        }#if($foreach.hasNext),#end\n\t#end\n    ]\n}"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"BeheardMailList\",\n    \"ReturnConsumedCapacity\"\
            : \"TOTAL\"\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Scan"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "text/html"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::090511222473:role/BeheardMailList-editor"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ \n    \"TableName\": \"BeheardMailList\",\n    \"Item\"\
            : {\n\t\"requestId\": {\n            \"S\": \"$context.requestId\"\n \
            \           },\n\t\"sourceIp\": {\n\t    \"S\": \"$context.identity.sourceIp\"\
            \n\t    },\n        \"emailAddress\": {\n            \"S\": \"$input.path('$.emailAddress')\"\
            \n        }\n    }\n}\n"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/PutItem"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
